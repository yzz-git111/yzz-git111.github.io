<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 个人学习总结</title>
    <link>https://yzz-git111.github.io/post/</link>
    <description>Recent content in Posts on 个人学习总结</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Sep 2020 18:26:44 +0800</lastBuildDate>
    
	<atom:link href="https://yzz-git111.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Union Find算法1</title>
      <link>https://yzz-git111.github.io/post/union-find%E7%AE%97%E6%B3%951/</link>
      <pubDate>Sat, 26 Sep 2020 18:26:44 +0800</pubDate>
      
      <guid>https://yzz-git111.github.io/post/union-find%E7%AE%97%E6%B3%951/</guid>
      <description>union-find|并查集 问题引入 假设给定一个数组A[0..n]。将它的每个点都看作一个独立的，每个点都可以用来表示任何一种数据类型。 现在把每个点都当作一个集合。对于给定的一对整数对，可以判断是否属于同一个集合。 若不属于同一个集合，则将两者所在的集合并为同一个集合。 参考《算法(第四版)》第1.5节的内容，将对象成为触点，将整数对称为连接，将等价类称为连通分量。  引入算法的目的 可以用于计算机网络，假设每个点都是一台计算机。 对于想要通信的两台计算机可以抽象为输入的一个整数对。算法可以判断两台计算机之间是否可以有连接能够通信。若没有连接则需要建立连接。 同时假设有一个十分庞大的人际关系网，使用算法可以很快的判断出对于输入的两人是否相识。并查集是一种简单有效的算法。   API 首先给出算法的API  UF（） //构造方法 初始化N个触点 void union(int p,int q) //将p和q连接到一个连通分量里 int find(int p) //返回p所在的连通分量的表示符(称为id) boolean connected(int p,int q) //判断p和q是否处于同一个连通分量 int getCount() //返回总的连通分量的个数 想法 有一个直观的想法：判断是否在同一连通分量只要看两者的连通分量的id是否相同。因为一个连通分量的所有触点的id都是一样的。 所有对于给定的一个整数对，先用find()找出两者所在的连通分量的id。 若id相同即说明二者在同一连通分量内，无需union 若id不同，则说明二者处在不同的连通分量内。调用union()。 循环遍历整个触点的数组 将id与触点p的id相同的所有触点该称q所在的连通分量的id，这就保证了将p所在的连通分量连接到q的连通分量上。 union()的最后不能忘记将count-- 说明整个连通分量的数目减1.  实现 UF() class UF { private int[]id; //以触点作为索引 private int count; public UF(int N) //构造方法 用于初始化触点 { count = N; id = new int[N]; for(int i=0;i&amp;lt;N;i++) { id[i] = i; } } getCount()  public int getCount() //用于返回private成员count 即连通分量的数目 { return count; } find()  public int find(int p) //返回p的连通分量 { return id[p]; } union  public void union(int p,int q) //将触点p和q连接到统一连通分量 { int pID = find(p); int qID = find(q); if(pID == qID) //p,q已经统一连通分量 空操作 { return; } for(int i=0;i&amp;lt;id.</description>
    </item>
    
    <item>
      <title>简介</title>
      <link>https://yzz-git111.github.io/post/discribtion/</link>
      <pubDate>Sat, 26 Sep 2020 12:25:39 +0800</pubDate>
      
      <guid>https://yzz-git111.github.io/post/discribtion/</guid>
      <description>这是我的个人博客
从今天开始我会陆续更新一些文章
文章主要内容是自己在学习编程路上的一些笔记或者总结
希望大家关注！
 这是我的Github 克隆了一些看到的优秀的代码资源</description>
    </item>
    
  </channel>
</rss>